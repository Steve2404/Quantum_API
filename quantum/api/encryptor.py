import base64
import hashlib

from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto.Util.Padding import pad, unpad


def hash_key(bits):
    """Convert a list of bits into a key usable for AES encryption."""
    bit_str = ''.join(str(bit) for bit in bits)
    key_raw = int(bit_str, 2).to_bytes((len(bit_str) + 7) // 8, 'big')
    hash_code = SHA256.new(key_raw)
    hash_code.update(key_raw)
    return hash_code.digest()[:16]


def encrypt_key_aes(key, aes_key):
    """
    Encrypt the binary BB84 key with AES.
    :param key: The key to encrypt (generated by BB84).
    :param aes_key: The AES symmetric key used for encryption.
    :return: The encrypted key in base64.
    """

    cipher = AES.new(aes_key, AES.MODE_CBC)  # Using AES in CBC mode.
    iv = cipher.iv
    ct_bytes = cipher.encrypt(pad(key.encode(), AES.block_size))  # Encryption of the key.

    ciphertext = base64.b64encode(iv + ct_bytes).decode('utf-8')  # Encrypted key.
    return {"iv": iv, "ciphertext": ciphertext}


def decrypt_key_aes(encrypted_key, aes_key):
    """
    Decrypts an AES key in CBC mode.
    :param encrypted_key: The key encrypted in base64.
    :param aes_key: The symmetric AES key used for decryption.
    :return: The decrypted key as text.
    """

    # Decode the IV and the encrypted text from base64 format.
    encrypted_key_decode = base64.b64decode(encrypted_key)
    iv = encrypted_key_decode[:AES.block_size]

    # Create the AES cipher in CBC mode.
    cipher = AES.new(aes_key, AES.MODE_CBC, iv)

    # Decrypt and unpad the data.
    decrypted_key_block = cipher.decrypt(encrypted_key_decode[AES.block_size:])
    decrypted_key = unpad(decrypted_key_block, AES.block_size)
    decrypted_key_list = [int(char) for char in decrypted_key.decode()]

    return decrypted_key_list
